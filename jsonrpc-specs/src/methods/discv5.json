[
	{
		"name": "discv5_nodeInfo",
		"summary": "Returns ENR and nodeId information of the local discv5 node.",
		"params": [],
		"result": {
			"name": "nodeInfoResult",
			"description": "Local node information",
			"required": true,
			"schema": {
				"title": "nodeInfoResults",
				"description": "ENR and NodeId of the local peer",
				"type": "object",
				"required": [
					"enr",
					"nodeId"
				],
				"properties": {
					"enr": {
						"title": "nodeENR",
						"description": "URL-safe base64 encoded \\\"text\\\" version of the ENR prefixed by \\\"enr:\\\".\"",
						"$ref": "#/components/schemas/Enr"
					},
					"nodeId": {
						"title": "nodeId",
						"description": "Hex encoded `NodeId` of an ENR (a 32 byte identifier).",
						"$ref": "#/components/schemas/bytes32"
					}
				}
			}
		}
	},
	{
		"name": "discv5_updateNodeInfo",
		"summary": "Add, update, or remove a key-value pair from the local node record",
		"params": [
			{
				"name": "socketAddr",
				"required": true,
				"schema": {
					"title": "ENR socket address",
					"$ref": "#/components/schemas/SocketAddr"}
			},
			{
				"name": "isTcp",
				"description": "TCP or UDP socket",
				"schema": {
					"type": "boolean"
				}
			}
		],
		"result": {
			"name": "nodeInfoResult",
			"description": "Local node information",
			"required": true,
			"schema": {
				"title": "nodeInfoResults",
				"description": "ENR and NodeId of the local peer",
				"type": "object",
				"required": [
					"enr",
					"localNodeId"
				],
				"properties": {
					"enr": {
						"title": "nodeENR",
						"description": "URL-safe base64 encoded \\\"text\\\" version of the ENR prefixed by \\\"enr:\\\".\"",
						"$ref": "#/components/schemas/Enr"
					},
					"localNodeId": {
						"title": "nodeId",
						"description": "Hex encoded `NodeId` of an ENR (a 32 byte identifier).",
						"$ref": "#/components/schemas/bytes32"
					}
				}
			}
		}
	},
	{
		"name": "discv5_routingTableInfo",
		"summary": "Returns meta information about discv5 routing table.",
		"params": [],
		"result": {
			"name": "routingTableInfoResult",
			"description": "Discv5 routing table information",
			"required": true,
			"schema": {
				"title": "routingTableInfoResults",
				"description": "Routing table details",
				"type": "object",
				"required": [
					"localNodeId",
					"buckets"
				],
				"properties": {
					"localNodeId": {
						"title": "nodeId",
						"description": "The key identifying the local peer that owns the routing table.",
						"$ref": "#/components/schemas/bytes32"
					},
					"buckets":  {
						"title": "kBucketsTable",
						"description": "Represents a Kademlia routing table.",
						"$ref": "#/components/schemas/kBuckets"
					}
				}
			}
		}
	},
	{
		"name": "discv5_addEnr",
		"summary": "Write an ethereum node record to the routing table.",
		"params": [
			{
				"name": "enr",
				"required": true,
				"schema": {
					"title": "Ethereum node record",
					"$ref": "#/components/schemas/Enr"
				}
			}
		],
		"result": {
			"name": "addEnrResult",
			"description": "Returns boolean if the node record has been successfully saved.",
		    "schema": {
				"type": "boolean"
			}
		}
	},
	{
		"name": "discv5_getEnr",
		"summary": "Fetch the latest ENR associated with the given node ID",
		"params": [
			{
				"name": "nodeId",
				"required": true,
				"schema": {
					"title": "NodeId",
					"$ref": "#/components/schemas/bytes32"
				}
			}
		],
		"result": {
			"name": "getEnrResult",
			"description": "Returns latest ENR associated with the given node ID.",
			"schema": {
					"title": "Ethereum node record",
					"$ref": "#/components/schemas/Enr"
				      }
		}
	},
	{
		"name": "discv5_deleteEnr",
		"summary": "Delete a Node ID from the routing table",
		"params": [
			{
				"name": "nodeId",
				"required": true,
				"schema": {
					"title": "NodeId",
					"$ref": "#/components/schemas/bytes32"
				}
			}
		],
		"result": {
			"name": "deleteEnrResult",
			"description": "Returns boolean upon successful deletion of the node record.",
			 "schema": {
				"type": "boolean"
			}
		}
	},
	{
		"name": "discv5_lookupEnr",
		"summary": "Fetch the ENR representation associated with the given Node ID and optional sequence number",
		"params": [
			{
				"name": "nodeId",
				"required": true,
				"schema": {
					"title": "NodeId",
					"$ref": "#/components/schemas/bytes32"
				}
			},
			{
				"name": "enrSeq",
				"schema": {
					"type": "number"
				}
			}
		],
		"result": {
			"name": "lookupEnrResult",
			"description": "Returns ENR associated with the given node ID",
			"schema": {
					"title": "Ethereum node record",
					"$ref": "#/components/schemas/Enr"
			}
		}
	},
	{
		"name": "discv5_sendPing",
		"summary": "Send a PING message to the specified node",
		"params": [
			{
				"name": "enr",
				"required": true,
				"schema": {
					"title": "Ethereum node record",
					"$ref": "#/components/schemas/Enr"
				}
			}
		],
		"result": {
			"name": "sendPingResult",
			"description": "Returns request-id element of message-data",
			"schema": {
				"title": "requestId",
				"type": "object",
				"required": ["requestId"],
				"properties": {
					"requestId": {
						"description": "Hex encoded RLP byte array of length <= 8 bytes",
						"$ref": "#/components/schemas/bytes8"
					}
				}
			}
		}
	},
	{
		"name": "discv5_sendPong",
		"summary": "Send a PONG message to the specified node",
		"params": [
			{
				"name": "enr",
				"required": true,
				"schema": {
					"title": "Ethereum node record",
					"$ref": "#/components/schemas/Enr"
				}
			},
			{
				"name": "requestId",
				"description": "request-id element of message-data",
				"required": true,
				"schema": {
					"title": "Hex encoded RLP byte array of length <= 8 bytes",
					"$ref": "#/components/schemas/bytes8"
				}
			}
		],
		"result": {
			"name": "sendPongResult",
			"description": "Returns \"None\" upon success.",
			"schema": {
				"type": "string",
				"pattern": "None$"
			}
		}
	},
	{
		"name": "discv5_sendFindNodes",
		"summary": "Send a FINDNODES request to a peer, to search within the given set of distances",
		"params": [
			{
				"name": "enr",
				"required": true,
				"schema": {
					"title": "Ethereum node record",
					"$ref": "#/components/schemas/Enr"
				}
			},
			{
				"name": "distances",
				"required": true,
				"schema": {
					"title": "distance",
					"type": "array",
					"items": {
						"type": "number"
					}
				}
			}
		],
		"result": {
			"name": "sendFindNodesResult",
			"description": "Returns the request-id assigned to the request message-data",
			"schema": {
				"title": "request-id",
				"$ref": "#/components/schemas/bytes8"
			}
		}
	},
	{
		"name": "discv5_sendFoundNodes",
		"summary": "Respond to a specific FINDNODES request with a FOUNDNODES response.",
		"params": [
			{
				"name": "enr",
				"required": true,
				"schema": {
					"title": "Ethereum node record",
					"$ref": "#/components/schemas/Enr"
				}
			},
			{
				"name": "foundNodes",
				"required": true,
				"schema": {
					"title": "foundNodes",
					"type": "array",
					"items": {
						"$ref": "#/components/schemas/Enr"
					}
				}
			},
			{
				"name": "requestId",
				"description": "request-id element of message-data",
				"required": true,
				"schema": {
					"description": "Hex encoded RLP byte array of length <= 8 bytes",
					"$ref": "#/components/schemas/bytes8"
				}
			}
		],
		"result": {
			"name": "sendFoundNodesResult",
			"description": "Returns the number of batches in which the given ENRs were divided and transmitted",
			"schema": {
				"title": "number of batches",
				"type": "number"
			}
		}
	},
	{
		"name": "discv5_sendTalkRequest",
		"summary": "Send a TALKREQUEST request with a payload to the given peer.",
		"params": [
			{
				"name": "enr",
				"required": true,
				"schema": {
					"title": "Ethereum node record",
					"$ref": "#/components/schemas/Enr"
				}
			},
			{
				"name": "protocol",
				"required": true,
				"description": "protocol element of message-data",
				"schema": {
					"title": "protocol id",
					"$ref": "#/components/schemas/hexString"
				}
			},
			{
				"name": "payload",
				"required": true,
				"description": "request element of message-data",
				"schema": {
					"$ref": "#/components/schemas/hexString"
				}
			}
		],
		"result": {
			"name": "sendTalkRequestResult",
			"description": "Returns the request-id assigned to the request message-data",
			"schema": {
				"title": "request-id",
				"$ref": "#/components/schemas/bytes8"
			}
		}
	},
	{
		"name": "discv5_sendTalkResponse",
		"summary": "Respond to a TALKREQUEST request by sending a TALKRESPONSE response.",
		"params": [
			{
				"name": "enr",
				"required": true,
				"schema": {
					"title": "Ethereum node record",
					"$ref": "#/components/schemas/Enr"
				}
			},
			{
				"name": "payload",
				"required": true,
				"description": "request element of message-data",
				"schema": {
					"$ref": "#/components/schemas/hexString"
				}
			},
			{
				"name": "requestId",
				"description": "request-id element of message-data",
				"required": true,
				"schema": {
					"description": "Hex encoded RLP byte array of length <= 8 bytes",
					"$ref": "#/components/schemas/bytes8"
				}
			}
		],
		"result": {
			"name": "sendTalkResponseResult",
			"description": "Returns \"None\" upon success.",
			"schema": {
				"type": "string",
				"pattern": "None$"
			}
		}
	},
	{
		"name": "discv5_ping",
		"summary": "Send a PING message to the designated node and wait for a PONG response.",
		"params": [
			{
				"name": "enr",
				"required": true,
				"schema": {
					"title": "Ethereum node record",
					"$ref": "#/components/schemas/Enr"
				}
			}
		],
		"result": {
			"name": "pingResult",
			"description": "Returns PONG response",
			"schema": {
				"title": "PONG message",
				"type": "object",
				"required": [
                    "enrSeq",
                    "recipientIP",
                    "recipientPort"
                ],
				"properties": {
					"enrSeq": {
						"description": "ENR sequence number of sender",
						"type": "number"
					},
					"recipientIP": {
						"description": "IP address of the intended recipient",
						"pattern": "((^\\s*((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))\\s*$)|(^\\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?\\s*$))"
					},
					"recipientPort": {
						"description": "recipient UDP port",
						"type": "number"
					}
				}
			}
		}
	},
	{
		"name": "discv5_findNodes",
		"summary": "Send a FINDNODES request for nodes that fall within the given set of distances, to the designated peer and wait for a response.",
		"params": [
			{
				"name": "enr",
				"required": true,
				"schema": {
					"title": "Ethereum node record",
					"$ref": "#/components/schemas/Enr"
				}
			},
			{
				"name": "distances",
				"required": true,
				"schema": {
					"title": "distance",
					"type": "array",
					"items": {
						"type": "number"
					}
				}
			}
		],
		"result": {
			"name": "findNodesResult",
			"description": "Returns nodes in a given distance",
			"schema": {
				"title": "FOUNDNODES message",
				"type": "array",
				"items": { "$ref": "#/components/schemas/Enr" }
			}
		}
	},
	{
		"name": "discv5_talk",
		"summary": "Send a TALKREQUEST request with a payload to a given peer and wait for response.",
		"params": [
			{
				"name": "enr",
				"required": true,
				"schema": {
					"title": "Ethereum node record",
					"$ref": "#/components/schemas/Enr"
				}
			},
			{
				"name": "protocol",
				"required": true,
				"description": "protocol element of message-data",
				"schema": {
					"title": "protocol id",
					"$ref": "#/components/schemas/hexString"
				}
			},
			{
				"name": "payload",
				"required": true,
				"description": "request element of message-data",
				"schema": {
					"$ref": "#/components/schemas/hexString"
				}
			}
		],
		"result": {
			"name": "talkResult",
			"description": "Returns TALKRESPONSE message as hex string",
			"schema": {
				"$ref": "#/components/schemas/hexString"
			}
		}
	},
	{
		"name": "discv5_recursiveFindNodes",
		"summary": "Lookup a target node within in the network",
		"params": [
			{
				"name": "nodeId",
				"required": true,
				"schema": {
					"title": "NodeId",
					"$ref": "#/components/schemas/bytes32"
				}
			}
		],
		"result": {
			"name": "recursiveFindNodesResult",
			"schema": {
				"type": "array",
				"items": { "$ref": "#/components/schemas/Enr" }
			}
		}
	},
	{
		"name": "discv5_bond",
		"summary": "Bond with the given node to ensure liveness.",
		"params": [
			{
				"name": "enr",
				"required": true,
				"schema": {
					"title": "Ethereum node record",
					"$ref": "#/components/schemas/Enr"
				}
			}
		],
		"result": {
			"name": "bondResult",
			"description": "Returns boolean",
			"schema": {
				"type": "boolean"
			}
		}
	}
]
